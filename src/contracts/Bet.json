{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_eventId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_chosenWinner",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "BetPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "OracleAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBettableEvents",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "pendingEvents",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractDAIBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_eventId",
          "type": "bytes32"
        }
      ],
      "name": "getEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "participants",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "participantCount",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "internalType": "enum OracleInterface.SportKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "internalType": "enum OracleInterface.EventOutcome",
          "name": "outcome",
          "type": "uint8"
        },
        {
          "internalType": "int8",
          "name": "winner",
          "type": "int8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "participants",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "participantCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "internalType": "enum OracleInterface.SportKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "internalType": "enum OracleInterface.EventOutcome",
          "name": "outcome",
          "type": "uint8"
        },
        {
          "internalType": "int8",
          "name": "winner",
          "type": "int8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_eventId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_chosenWinner",
          "type": "uint8"
        }
      ],
      "name": "placeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracleAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testOracleConnection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5ab97c73277b31e413eb69ea578e1f5d10461d5532b60c8a6ef05a5b6f8415b3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2067246",
    "logsBloom": "0x
    "blockHash": "0x1f085cff3e56d7b7469bbd30e19c6f4377b219f19472187c5c4a216ab10d99ca",
    "transactionHash": "0x5ab97c73277b31e413eb69ea578e1f5d10461d5532b60c8a6ef05a5b6f8415b3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x5ab97c73277b31e413eb69ea578e1f5d10461d5532b60c8a6ef05a5b6f8415b3",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1f085cff3e56d7b7469bbd30e19c6f4377b219f19472187c5c4a216ab10d99ca"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "2067246",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "solcInputHash": "89cc22e97f81fa785d5cd8aed7ef2518",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_eventId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_chosenWinner\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"OracleAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBettableEvents\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"pendingEvents\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractDAIBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_eventId\",\"type\":\"bytes32\"}],\"name\":\"getEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"participants\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"participantCount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"enum OracleInterface.SportKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"enum OracleInterface.EventOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"winner\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"participants\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"participantCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"enum OracleInterface.SportKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"enum OracleInterface.EventOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"winner\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_eventId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_chosenWinner\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testOracleConnection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Tanteli, block74\",\"events\":{\"BetPlaced(bytes32,address,uint8,uint256)\":{\"details\":\"Sent when once a bet is placed\"},\"OracleAddressSet(address)\":{\"details\":\"Sent once the Sport Event Oracle is set\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"_amount\":\"the amount approved to be used by _spender\",\"_spender\":\"an address allowed to spend user's DAI\"}},\"constructor\":{\"params\":{\"_tokenAddress\":\"the address of the deployed ERC20 DAI token\"}},\"deposit(address,uint256)\":{\"params\":{\"_amount\":\"the amount to be deposited\",\"_sender\":\"the address that owns  the tokens\"}},\"getBettableEvents()\":{\"returns\":{\"pendingEvents\":\"the list of pending sport events\"}},\"getContractDAIBalance()\":{\"returns\":{\"_0\":\"the DAI balance of the contract\"}},\"getEvent(bytes32)\":{\"params\":{\"_eventId\":\"the id of the desired event\"},\"returns\":{\"date\":\"when the event takes place\",\"id\":\"  the id of the event\",\"kind\":\"what is sport kind\",\"name\":\"the name of the event\",\"outcome\":\"an integer that represents the event outcome\",\"participantCount\":\"the number of the event's participants\",\"participants\":\"a string with the name of the event's participants separated with a pipe symbol ('|')\",\"winner\":\"the index of the winner\"}},\"getLatestEvent()\":{\"returns\":{\"date\":\"when the event takes place\",\"id\":\"  the id of the event\",\"kind\":\"what is sport kind\",\"name\":\"the name of the event\",\"outcome\":\"an integer that represents the event outcome\",\"participantCount\":\"the number of the event's participants\",\"participants\":\"the name of the event's participants separated with a pipe symbol ('|')\",\"winner\":\"the index of the winner (0 = TeamA, 1 = TeamB)\"}},\"getOracleAddress()\":{\"returns\":{\"_0\":\"the address of the oracle we use to get the sport events and their outcomes\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"placeBet(bytes32,uint8)\":{\"params\":{\"_chosenWinner\":\"index of the supposed winner team\",\"_eventId\":\"id of the sport event on which to bet\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOracleAddress(address)\":{\"details\":\"setting a wrong address may result in false return value, or error\",\"params\":{\"_oracleAddress\":\"the address of the sport event bet oracle\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"Dai\":{\"details\":\"An instance of ERC20 DAI Token\"},\"betOracle\":{\"details\":\"Instance of the sport events Oracle (used to register sport events get their outcome).\"},\"eventToBets\":{\"details\":\"for any given event, get a list of all bets that have been made for that event    map composed of (event id => array of bets) pairs\"},\"minimumBet\":{\"details\":\"minimum bet amount\"},\"oracleAddress\":{\"details\":\"Address of the sport events Oracle\"},\"userToBets\":{\"details\":\"list of all bets per player, ie. a map composed (player address => bet id) pairs\"}},\"title\":\"a Smart-Contract in charge of handling bets on a sport event outcome where players do not loose their stake and winners earn the interests accrued on the stakes.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets `_amount` as the allowance of `_spender` over the caller's tokens.\"},\"deposit(address,uint256)\":{\"notice\":\"Moves `_amount` tokens from `_sender` to this contract\"},\"getBettableEvents()\":{\"notice\":\"gets a list ids of all currently bettable events\"},\"getEvent(bytes32)\":{\"notice\":\"returns the full data of the specified event\"},\"getLatestEvent()\":{\"notice\":\"returns the full data of the most recent bettable sport event\"},\"placeBet(bytes32,uint8)\":{\"notice\":\"places a bet on the given event\"},\"setOracleAddress(address)\":{\"notice\":\"sets the address of the sport event bet oracle contract to use\"},\"testOracleConnection()\":{\"notice\":\"for testing purposes: make sure that the sport event oracle is callable\"}},\"notice\":\"This Ethereum smart-contract takes bets placed on sport events. It then invests all bets deposits for a given event (pot) in DeFi. Then once the event outcome is confirmed, it makes the accrued interests ready for the winners to withdraw proportionnaly to their initial stake. Players do not loose their stake.Takes bets and handles payouts for sport events\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bet.sol\":\"Bet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/Bet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./OracleInterface.sol\\\";\\n\\n/**\\n * This Ethereum smart-contract takes bets placed on sport events.\\n * It then invests all bets deposits for a given event (pot) in DeFi.\\n * Then once the event outcome is confirmed,\\n * it makes the accrued interests ready for the winners\\n * to withdraw proportionnaly to their initial stake.\\n * Players do not loose their stake.\\n *\\n * @notice Takes bets and handles payouts for sport events\\n * @title  a Smart-Contract in charge of handling bets on a sport event outcome where players do not loose their stake and winners earn the interests accrued on the stakes.\\n * @author Tanteli, block74\\n */\\ncontract Bet is Ownable, ReentrancyGuard {\\n\\n    /**\\n     * @dev An instance of ERC20 DAI Token\\n     */\\n    IERC20 private Dai;\\n\\n    /**\\n     * @dev list of all bets per player, ie. a map composed (player address => bet id) pairs\\n     */\\n    mapping(address => bytes32[]) private userToBets;\\n\\n    /**\\n     *  @dev for any given event, get a list of all bets that have been made for that event\\n     *    map composed of (event id => array of bets) pairs\\n     */\\n    mapping(bytes32 => Payload[]) private eventToBets;\\n\\n    /**\\n     * @dev Address of the sport events Oracle\\n     */\\n    address internal oracleAddress = address(0);\\n\\n    /**\\n     *  @dev Instance of the sport events Oracle (used to register sport events get their outcome).\\n     */\\n    OracleInterface internal betOracle = OracleInterface(oracleAddress);\\n\\n    /**\\n     * @dev minimum bet amount\\n     */\\n    uint internal minimumBet = 0.1 ether;\\n\\n    /**\\n     * @dev payload of a bet on a sport event\\n     */\\n    struct Payload {\\n        address user;          // who placed it\\n        bytes32 eventId;       // id of the sport event as registered in the Oracle\\n        uint    amount;        // bet amount\\n        uint8   chosenWinner;  // Index of the team that will win according to the player\\n    }\\n\\n    /**\\n     * @dev Possible outcomes for a sport event\\n     */\\n    enum BettableOutcome {\\n        Team1,\\n        Team2\\n    }\\n\\n    /**\\n     * @dev check that the passed in address is not 0.\\n     */\\n    modifier notAddress0(address _address) {\\n        require(_address != address(0), \\\"Address 0 is not allowed\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sent once the Sport Event Oracle is set\\n     */\\n    event OracleAddressSet( address _address);\\n\\n    /**\\n     * @dev Sent when once a bet is placed\\n     */\\n    event BetPlaced(\\n        bytes32 _eventId,\\n        address _player,\\n        uint8   _chosenWinner,\\n        uint    _amount\\n    );\\n\\n    /**\\n     * @param _tokenAddress the address of the deployed ERC20 DAI token\\n     */\\n    constructor(address _tokenAddress)\\n        notAddress0(_tokenAddress)\\n    {\\n        Dai = IERC20(_tokenAddress);\\n    }\\n\\n    /**\\n     * @return the DAI balance of the contract\\n     */\\n    function getContractDAIBalance()\\n        public view returns (uint)\\n    {\\n        return Dai.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Moves `_amount` tokens from `_sender` to this contract\\n     * @param _sender the address that owns  the tokens\\n     * @param _amount the amount to be deposited\\n     */\\n    function deposit(address _sender, uint _amount)\\n        external\\n        notAddress0(_sender)\\n    {\\n        // At least a minimum amount is required to be deposited\\n        require(_amount >= 10, \\\"Amount deposited must be >= 10\\\");\\n        Dai.transferFrom(_sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @notice Sets `_amount` as the allowance of `_spender` over the caller's tokens.\\n     * @param _spender an address allowed to spend user's DAI\\n     * @param _amount the amount approved to be used by _spender\\n     */\\n    function approve(address _spender, uint _amount)\\n        external\\n        notAddress0(_spender)\\n    {\\n        Dai.approve(_spender, _amount);\\n    }\\n\\n    /**\\n     * @notice sets the address of the sport event bet oracle contract to use\\n     * @dev setting a wrong address may result in false return value, or error\\n     * @param _oracleAddress the address of the sport event bet oracle\\n     */\\n    function setOracleAddress(address _oracleAddress)\\n        external\\n        onlyOwner notAddress0(_oracleAddress)\\n        returns (bool)\\n    {\\n        oracleAddress = _oracleAddress;\\n        betOracle = OracleInterface(oracleAddress);\\n        emit OracleAddressSet(oracleAddress);\\n\\n        return betOracle.testConnection();\\n    }\\n\\n    /**\\n     * @notice for testing purposes: make sure that the sport event oracle is callable\\n     */\\n    function testOracleConnection()\\n        public view returns (bool)\\n    {\\n        return oracleAddress != address(0) && betOracle.testConnection();\\n    }\\n\\n    /**\\n     * @return the address of the oracle we use to get the sport events and their outcomes\\n     */\\n    function getOracleAddress()\\n        external view returns (address)\\n    {\\n        return oracleAddress;\\n    }\\n\\n    /**\\n     * @notice determines whether or not the user has already bet on the given sport event\\n     * @param _user address of a player\\n     * @param _eventId id of a event\\n     * @param _chosenWinner the index of the participant to bet on (to win)\\n     */\\n    function _betIsValid(address _user, bytes32 _eventId, uint8 _chosenWinner)\\n        private pure returns (bool)\\n    {\\n        // if (userToBets[_user].length == 0) {\\n        //     userToBets[_user]\\n        // }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice determines whether or not bets may still be accepted for the given match\\n     * @param _eventId id of an event\\n     */\\n    function _eventOpenForBetting(bytes32 _eventId)\\n        private pure returns (bool)\\n    {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice gets a list ids of all currently bettable events\\n     * @return pendingEvents the list of pending sport events\\n     */\\n    function getBettableEvents()\\n        public view returns (bytes32[] memory pendingEvents)\\n    {\\n        return betOracle.getPendingEvents();\\n    }\\n\\n    /**\\n     * @notice returns the full data of the specified event\\n     * @param _eventId the id of the desired event\\n     * @return id   the id of the event\\n     * @return name the name of the event\\n     * @return participants a string with the name of the event's participants separated with a pipe symbol ('|')\\n     * @return participantCount the number of the event's participants\\n     * @return date when the event takes place\\n     * @return kind what is sport kind\\n     * @return outcome an integer that represents the event outcome\\n     * @return winner the index of the winner\\n     */\\n    function getEvent(bytes32 _eventId)\\n        public view returns (\\n            bytes32                      id,\\n            string memory                name,\\n            string memory                participants,\\n            uint8                        participantCount,\\n            uint                         date,\\n            OracleInterface.SportKind    kind,\\n            OracleInterface.EventOutcome outcome,\\n            int8                         winner\\n        )\\n    {\\n        return betOracle.getEvent(_eventId);\\n    }\\n\\n    /**\\n     * @notice returns the full data of the most recent bettable sport event\\n     * @return id   the id of the event\\n     * @return name the name of the event\\n     * @return participants the name of the event's participants separated with a pipe symbol ('|')\\n     * @return participantCount the number of the event's participants\\n     * @return date when the event takes place\\n     * @return kind what is sport kind\\n     * @return outcome an integer that represents the event outcome\\n     * @return winner the index of the winner (0 = TeamA, 1 = TeamB)\\n     */\\n    function getLatestEvent()\\n        public view returns (\\n            bytes32                      id,\\n            string memory                name,\\n            string memory                participants,\\n            uint                         participantCount,\\n            uint                         date,\\n            OracleInterface.SportKind    kind,\\n            OracleInterface.EventOutcome outcome,\\n            int8                         winner\\n        )\\n    {\\n        return betOracle.getLatestEvent(true);\\n    }\\n\\n    /**\\n     * @notice places a bet on the given event\\n     * @param _eventId      id of the sport event on which to bet\\n     * @param _chosenWinner index of the supposed winner team\\n     */\\n    function placeBet(bytes32 _eventId, uint8 _chosenWinner)\\n        public payable\\n        notAddress0(msg.sender)\\n        nonReentrant\\n    {\\n        // At least a minimum amout is required to bet\\n        require(msg.value >= minimumBet, \\\"Bet amount must be >= minimum bet\\\");\\n\\n        // // Make sure this is sport event exists (ie. already registered in the Oracle)\\n        require(betOracle.eventExists(_eventId), \\\"Specified event not found\\\");\\n\\n        // The chosen winner must fall within the defined number of participants for this event\\n        require(_betIsValid(msg.sender, _eventId, _chosenWinner), \\\"Bet is not valid\\\");\\n\\n        // Event must still be open for betting\\n        require(_eventOpenForBetting(_eventId), \\\"Event not open for betting\\\");\\n\\n        // transfer the player's money into the contract's account\\n        payable(address(this)).transfer(msg.value);\\n\\n        // add the new bet\\n        Payload[] storage bets = eventToBets[_eventId];\\n        bets.push( Payload(msg.sender, _eventId, msg.value, _chosenWinner));\\n\\n        // add the mapping\\n        bytes32[] storage userBets = userToBets[msg.sender];\\n        userBets.push(_eventId);\\n\\n        emit BetPlaced(\\n            _eventId,\\n            msg.sender,      // player\\n            _chosenWinner,\\n            msg.value        // bet amount\\n        );\\n    }\\n\\n    /**\\n     *  @notice This smart-contract accepts DAI ERC20 token\\n     */\\n    receive() external payable {\\n    }\\n}\\n\",\"keccak256\":\"0x5d040662906502fa61a5d9657fb9890305376455a7e28d4881f03f3b53ff2c9d\",\"license\":\"MIT\"},\"contracts/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The interface for the events Oracle (`BetOracle`)\\n * @notice Declares the functions that the `BetOracle` contract exposes externally\\n */\\ninterface OracleInterface {\\n\\n    /**\\n     * @dev The possible outcomes for an event\\n     * Keep in sync the `EventOutcome` constant in `betoracle.txt.js` when updating this enum.\\n     */\\n    enum EventOutcome {\\n        Pending,    //match has not been fought to decision\\n        Underway,   //match has started & is underway\\n        Draw,       //anything other than a clear winner (e.g. cancelled)\\n        Decided     //index of participant who is the winner\\n    }\\n\\n    enum SportKind {\\n        Soccer,\\n        Rugby,\\n        Basketball\\n    }\\n\\n    function eventExists(bytes32 _eventId)\\n        external view returns (bool);\\n\\n    function getPendingEvents()\\n        external view returns (bytes32[] memory);\\n\\n    function getAllSportEvents()\\n        external view returns (bytes32[] memory);\\n\\n    function getEvent(bytes32 _eventId)\\n        external view returns (\\n            bytes32       id,\\n            string memory name,\\n            string memory participants,\\n            uint8         participantCount,\\n            uint          date,\\n            SportKind     kind,\\n            EventOutcome  outcome,\\n            int8          winner\\n        );\\n\\n    function getLatestEvent(bool _pending)\\n        external view returns (\\n            bytes32       id,\\n            string memory name,\\n            string memory participants,\\n            uint8          participantCount,\\n            uint          date,\\n            SportKind     kind,\\n            EventOutcome  outcome,\\n            int8          winner\\n        );\\n\\n    function testConnection()\\n        external pure returns (bool);\\n\\n}\\n\",\"keccak256\":\"0xd4c343121f3f30159c7eb768a341b21c1fa48cca505619a2a8c08b47d23bd283\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555067016345785d8a0000600755348015620000c257600080fd5b5060405162002653380380620026538339818101604052810190620000e89190620002af565b62000108620000fc620001cc60201b60201c565b620001d460201b60201c565b6001808190555080600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000183576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017a9062000302565b60405180910390fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620003ac565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620002a98162000392565b92915050565b600060208284031215620002c257600080fd5b6000620002d28482850162000298565b91505092915050565b6000620002ea60188362000324565b9150620002f78262000369565b602082019050919050565b600060208201905081810360008301526200031d81620002db565b9050919050565b600082825260208201905092915050565b6000620003428262000349565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f416464726573732030206973206e6f7420616c6c6f7765640000000000000000600082015250565b6200039d8162000335565b8114620003a957600080fd5b50565b61229780620003bc6000396000f3fe6080604052600436106100c65760003560e01c806379ff47771161007f5780639a74c81f116100595780639a74c81f146102605780639be2395d1461028b578063b18b78dd146102b6578063f2fde38b146102e1576100cd565b806379ff4777146101bf5780638c172fa2146101f15780638da5cb5b14610235576100cd565b8063095ea7b3146100d25780630e52bb49146100fb5780632ce3707e1461011757806347e7ef24146101425780634c69c00f1461016b578063715018a6146101a8576100cd565b366100cd57005b600080fd5b3480156100de57600080fd5b506100f960048036038101906100f49190611580565b61030a565b005b61011560048036038101906101109190611731565b610430565b005b34801561012357600080fd5b5061012c6108a6565b6040516101399190611aa4565b60405180910390f35b34801561014e57600080fd5b5061016960048036038101906101649190611580565b6109a7565b005b34801561017757600080fd5b50610192600480360381019061018d9190611557565b610b13565b60405161019f9190611aa4565b60405180910390f35b3480156101b457600080fd5b506101bd610da7565b005b3480156101cb57600080fd5b506101d4610e2f565b6040516101e8989796959493929190611b1f565b60405180910390f35b3480156101fd57600080fd5b5061021860048036038101906102139190611626565b610f0d565b60405161022c989796959493929190611bab565b60405180910390f35b34801561024157600080fd5b5061024a610fe5565b6040516102579190611a07565b60405180910390f35b34801561026c57600080fd5b5061027561100e565b6040516102829190611d57565b60405180910390f35b34801561029757600080fd5b506102a06110c0565b6040516102ad9190611a82565b60405180910390f35b3480156102c257600080fd5b506102cb61116c565b6040516102d89190611a07565b60405180910390f35b3480156102ed57600080fd5b5061030860048036038101906103039190611557565b611196565b005b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561037b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037290611cf7565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b384846040518363ffffffff1660e01b81526004016103d8929190611a59565b602060405180830381600087803b1580156103f257600080fd5b505af1158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a91906115fd565b50505050565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049890611cf7565b60405180910390fd5b600260015414156104e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104de90611d37565b60405180910390fd5b6002600181905550600754341015610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052b90611cd7565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663118e58bd846040518263ffffffff1660e01b815260040161058f9190611abf565b60206040518083038186803b1580156105a757600080fd5b505afa1580156105bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105df91906115fd565b61061e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061590611c77565b60405180910390fd5b61062933848461128e565b610668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065f90611cb7565b60405180910390fd5b6106718361129b565b6106b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a790611c97565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156106f6573d6000803e3d6000fd5b5060006004600085815260200190815260200160002090508060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018681526020013481526020018560ff16815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908360ff16021790555050506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050808590806001815401808255809150506001900390600052602060002001600090919091909150557f22f4c9bb73a93d9507392476fa412371d3d5e19e74d8951567b76a7483dca1a0853386346040516108909493929190611ada565b60405180910390a1505060018081905550505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156109a25750600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633412a15c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561096957600080fd5b505afa15801561097d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a191906115fd565b5b905090565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0f90611cf7565b60405180910390fd5b600a821015610a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5390611c37565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8430856040518463ffffffff1660e01b8152600401610abb93929190611a22565b602060405180830381600087803b158015610ad557600080fd5b505af1158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d91906115fd565b50505050565b6000610b1d6112a6565b73ffffffffffffffffffffffffffffffffffffffff16610b3b610fe5565b73ffffffffffffffffffffffffffffffffffffffff1614610b91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8890611d17565b60405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf990611cf7565b60405180910390fd5b82600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fdd82bdfc28fcc826c53263dc2a2b6083e27e92699ebfee617227e08e21c202f0600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610cf79190611a07565b60405180910390a1600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633412a15c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6757600080fd5b505afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f91906115fd565b915050919050565b610daf6112a6565b73ffffffffffffffffffffffffffffffffffffffff16610dcd610fe5565b73ffffffffffffffffffffffffffffffffffffffff1614610e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1a90611d17565b60405180910390fd5b610e2d60006112ae565b565b60006060806000806000806000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329e5426960016040518263ffffffff1660e01b8152600401610e989190611aa4565b60006040518083038186803b158015610eb057600080fd5b505afa158015610ec4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610eed919061164f565b8460ff169450975097509750975097509750975097509091929394959697565b60006060806000806000806000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c172fa28a6040518263ffffffff1660e01b8152600401610f759190611abf565b60006040518083038186803b158015610f8d57600080fd5b505afa158015610fa1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610fca919061164f565b97509750975097509750975097509750919395975091939597565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161106b9190611a07565b60206040518083038186803b15801561108357600080fd5b505afa158015611097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bb919061176d565b905090565b6060600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4184e706040518163ffffffff1660e01b815260040160006040518083038186803b15801561112a57600080fd5b505afa15801561113e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061116791906115bc565b905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61119e6112a6565b73ffffffffffffffffffffffffffffffffffffffff166111bc610fe5565b73ffffffffffffffffffffffffffffffffffffffff1614611212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120990611d17565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127990611c57565b60405180910390fd5b61128b816112ae565b50565b6000600190509392505050565b600060019050919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600061138561138084611d97565b611d72565b905080838252602082019050828560208602820111156113a457600080fd5b60005b858110156113d457816113ba8882611485565b8452602084019350602083019250506001810190506113a7565b5050509392505050565b60006113f16113ec84611dc3565b611d72565b90508281526020810184848401111561140957600080fd5b611414848285611eff565b509392505050565b60008135905061142b816121b7565b92915050565b600082601f83011261144257600080fd5b8151611452848260208601611372565b91505092915050565b60008151905061146a816121ce565b92915050565b60008135905061147f816121e5565b92915050565b600081519050611494816121e5565b92915050565b6000815190506114a9816121fc565b92915050565b6000815190506114be8161220c565b92915050565b6000815190506114d38161221c565b92915050565b600082601f8301126114ea57600080fd5b81516114fa8482602086016113de565b91505092915050565b60008135905061151281612233565b92915050565b60008151905061152781612233565b92915050565b60008135905061153c8161224a565b92915050565b6000815190506115518161224a565b92915050565b60006020828403121561156957600080fd5b60006115778482850161141c565b91505092915050565b6000806040838503121561159357600080fd5b60006115a18582860161141c565b92505060206115b285828601611503565b9150509250929050565b6000602082840312156115ce57600080fd5b600082015167ffffffffffffffff8111156115e857600080fd5b6115f484828501611431565b91505092915050565b60006020828403121561160f57600080fd5b600061161d8482850161145b565b91505092915050565b60006020828403121561163857600080fd5b600061164684828501611470565b91505092915050565b600080600080600080600080610100898b03121561166c57600080fd5b600061167a8b828c01611485565b985050602089015167ffffffffffffffff81111561169757600080fd5b6116a38b828c016114d9565b975050604089015167ffffffffffffffff8111156116c057600080fd5b6116cc8b828c016114d9565b96505060606116dd8b828c01611542565b95505060806116ee8b828c01611518565b94505060a06116ff8b828c016114af565b93505060c06117108b828c0161149a565b92505060e06117218b828c016114c4565b9150509295985092959890939650565b6000806040838503121561174457600080fd5b600061175285828601611470565b92505060206117638582860161152d565b9150509250929050565b60006020828403121561177f57600080fd5b600061178d84828501611518565b91505092915050565b60006117a2838361182a565b60208301905092915050565b6117b781611e49565b82525050565b60006117c882611e04565b6117d28185611e27565b93506117dd83611df4565b8060005b8381101561180e5781516117f58882611796565b975061180083611e1a565b9250506001810190506117e1565b5085935050505092915050565b61182481611e5b565b82525050565b61183381611e67565b82525050565b61184281611e67565b82525050565b61185181611edb565b82525050565b61186081611eed565b82525050565b61186f81611e97565b82525050565b600061188082611e0f565b61188a8185611e38565b935061189a818560208601611eff565b6118a381611fc1565b840191505092915050565b60006118bb601e83611e38565b91506118c682611fd2565b602082019050919050565b60006118de602683611e38565b91506118e982611ffb565b604082019050919050565b6000611901601983611e38565b915061190c8261204a565b602082019050919050565b6000611924601a83611e38565b915061192f82612073565b602082019050919050565b6000611947601083611e38565b91506119528261209c565b602082019050919050565b600061196a602183611e38565b9150611975826120c5565b604082019050919050565b600061198d601883611e38565b915061199882612114565b602082019050919050565b60006119b0602083611e38565b91506119bb8261213d565b602082019050919050565b60006119d3601f83611e38565b91506119de82612166565b602082019050919050565b6119f281611ec4565b82525050565b611a0181611ece565b82525050565b6000602082019050611a1c60008301846117ae565b92915050565b6000606082019050611a3760008301866117ae565b611a4460208301856117ae565b611a5160408301846119e9565b949350505050565b6000604082019050611a6e60008301856117ae565b611a7b60208301846119e9565b9392505050565b60006020820190508181036000830152611a9c81846117bd565b905092915050565b6000602082019050611ab9600083018461181b565b92915050565b6000602082019050611ad46000830184611839565b92915050565b6000608082019050611aef6000830187611839565b611afc60208301866117ae565b611b0960408301856119f8565b611b1660608301846119e9565b95945050505050565b600061010082019050611b35600083018b611839565b8181036020830152611b47818a611875565b90508181036040830152611b5b8189611875565b9050611b6a60608301886119e9565b611b7760808301876119e9565b611b8460a0830186611857565b611b9160c0830185611848565b611b9e60e0830184611866565b9998505050505050505050565b600061010082019050611bc1600083018b611839565b8181036020830152611bd3818a611875565b90508181036040830152611be78189611875565b9050611bf660608301886119f8565b611c0360808301876119e9565b611c1060a0830186611857565b611c1d60c0830185611848565b611c2a60e0830184611866565b9998505050505050505050565b60006020820190508181036000830152611c50816118ae565b9050919050565b60006020820190508181036000830152611c70816118d1565b9050919050565b60006020820190508181036000830152611c90816118f4565b9050919050565b60006020820190508181036000830152611cb081611917565b9050919050565b60006020820190508181036000830152611cd08161193a565b9050919050565b60006020820190508181036000830152611cf08161195d565b9050919050565b60006020820190508181036000830152611d1081611980565b9050919050565b60006020820190508181036000830152611d30816119a3565b9050919050565b60006020820190508181036000830152611d50816119c6565b9050919050565b6000602082019050611d6c60008301846119e9565b92915050565b6000611d7c611d8d565b9050611d888282611f32565b919050565b6000604051905090565b600067ffffffffffffffff821115611db257611db1611f92565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611dde57611ddd611f92565b5b611de782611fc1565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611e5482611ea4565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611e7f8261218f565b919050565b6000819050611e92826121a3565b919050565b60008160000b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611ee682611e71565b9050919050565b6000611ef882611e84565b9050919050565b60005b83811015611f1d578082015181840152602081019050611f02565b83811115611f2c576000848401525b50505050565b611f3b82611fc1565b810181811067ffffffffffffffff82111715611f5a57611f59611f92565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f416d6f756e74206465706f7369746564206d757374206265203e3d2031300000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f537065636966696564206576656e74206e6f7420666f756e6400000000000000600082015250565b7f4576656e74206e6f74206f70656e20666f722062657474696e67000000000000600082015250565b7f426574206973206e6f742076616c696400000000000000000000000000000000600082015250565b7f42657420616d6f756e74206d757374206265203e3d206d696e696d756d20626560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573732030206973206e6f7420616c6c6f7765640000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600481106121a05761219f611f63565b5b50565b600381106121b4576121b3611f63565b5b50565b6121c081611e49565b81146121cb57600080fd5b50565b6121d781611e5b565b81146121e257600080fd5b50565b6121ee81611e67565b81146121f957600080fd5b50565b6004811061220957600080fd5b50565b6003811061221957600080fd5b50565b61222581611e97565b811461223057600080fd5b50565b61223c81611ec4565b811461224757600080fd5b50565b61225381611ece565b811461225e57600080fd5b5056fea2646970667358221220e924b69130ac772ab5cc45a5cccbbbf17f8c8605acb5b872af158ac49898227864736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Tanteli, block74",
    "events": {
      "BetPlaced(bytes32,address,uint8,uint256)": {
        "details": "Sent when once a bet is placed"
      },
      "OracleAddressSet(address)": {
        "details": "Sent once the Sport Event Oracle is set"
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "_amount": "the amount approved to be used by _spender",
          "_spender": "an address allowed to spend user's DAI"
        }
      },
      "constructor": {
        "params": {
          "_tokenAddress": "the address of the deployed ERC20 DAI token"
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "_amount": "the amount to be deposited",
          "_sender": "the address that owns  the tokens"
        }
      },
      "getBettableEvents()": {
        "returns": {
          "pendingEvents": "the list of pending sport events"
        }
      },
      "getContractDAIBalance()": {
        "returns": {
          "_0": "the DAI balance of the contract"
        }
      },
      "getEvent(bytes32)": {
        "params": {
          "_eventId": "the id of the desired event"
        },
        "returns": {
          "date": "when the event takes place",
          "id": "  the id of the event",
          "kind": "what is sport kind",
          "name": "the name of the event",
          "outcome": "an integer that represents the event outcome",
          "participantCount": "the number of the event's participants",
          "participants": "a string with the name of the event's participants separated with a pipe symbol ('|')",
          "winner": "the index of the winner"
        }
      },
      "getLatestEvent()": {
        "returns": {
          "date": "when the event takes place",
          "id": "  the id of the event",
          "kind": "what is sport kind",
          "name": "the name of the event",
          "outcome": "an integer that represents the event outcome",
          "participantCount": "the number of the event's participants",
          "participants": "the name of the event's participants separated with a pipe symbol ('|')",
          "winner": "the index of the winner (0 = TeamA, 1 = TeamB)"
        }
      },
      "getOracleAddress()": {
        "returns": {
          "_0": "the address of the oracle we use to get the sport events and their outcomes"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "placeBet(bytes32,uint8)": {
        "params": {
          "_chosenWinner": "index of the supposed winner team",
          "_eventId": "id of the sport event on which to bet"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOracleAddress(address)": {
        "details": "setting a wrong address may result in false return value, or error",
        "params": {
          "_oracleAddress": "the address of the sport event bet oracle"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "Dai": {
        "details": "An instance of ERC20 DAI Token"
      },
      "betOracle": {
        "details": "Instance of the sport events Oracle (used to register sport events get their outcome)."
      },
      "eventToBets": {
        "details": "for any given event, get a list of all bets that have been made for that event    map composed of (event id => array of bets) pairs"
      },
      "minimumBet": {
        "details": "minimum bet amount"
      },
      "oracleAddress": {
        "details": "Address of the sport events Oracle"
      },
      "userToBets": {
        "details": "list of all bets per player, ie. a map composed (player address => bet id) pairs"
      }
    },
    "title": "a Smart-Contract in charge of handling bets on a sport event outcome where players do not loose their stake and winners earn the interests accrued on the stakes.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Sets `_amount` as the allowance of `_spender` over the caller's tokens."
      },
      "deposit(address,uint256)": {
        "notice": "Moves `_amount` tokens from `_sender` to this contract"
      },
      "getBettableEvents()": {
        "notice": "gets a list ids of all currently bettable events"
      },
      "getEvent(bytes32)": {
        "notice": "returns the full data of the specified event"
      },
      "getLatestEvent()": {
        "notice": "returns the full data of the most recent bettable sport event"
      },
      "placeBet(bytes32,uint8)": {
        "notice": "places a bet on the given event"
      },
      "setOracleAddress(address)": {
        "notice": "sets the address of the sport event bet oracle contract to use"
      },
      "testOracleConnection()": {
        "notice": "for testing purposes: make sure that the sport event oracle is callable"
      }
    },
    "notice": "This Ethereum smart-contract takes bets placed on sport events. It then invests all bets deposits for a given event (pot) in DeFi. Then once the event outcome is confirmed, it makes the accrued interests ready for the winners to withdraw proportionnaly to their initial stake. Players do not loose their stake.Takes bets and handles payouts for sport events",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Bet.sol:Bet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 114,
        "contract": "contracts/Bet.sol:Bet",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 258,
        "contract": "contracts/Bet.sol:Bet",
        "label": "Dai",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)221"
      },
      {
        "astId": 264,
        "contract": "contracts/Bet.sol:Bet",
        "label": "userToBets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 271,
        "contract": "contracts/Bet.sol:Bet",
        "label": "eventToBets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_array(t_struct(Payload)298_storage)dyn_storage)"
      },
      {
        "astId": 278,
        "contract": "contracts/Bet.sol:Bet",
        "label": "oracleAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 285,
        "contract": "contracts/Bet.sol:Bet",
        "label": "betOracle",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(OracleInterface)1387"
      },
      {
        "astId": 289,
        "contract": "contracts/Bet.sol:Bet",
        "label": "minimumBet",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Payload)298_storage)dyn_storage": {
        "base": "t_struct(Payload)298_storage",
        "encoding": "dynamic_array",
        "label": "struct Bet.Payload[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)221": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(OracleInterface)1387": {
        "encoding": "inplace",
        "label": "contract OracleInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_array(t_struct(Payload)298_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Bet.Payload[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Payload)298_storage)dyn_storage"
      },
      "t_struct(Payload)298_storage": {
        "encoding": "inplace",
        "label": "struct Bet.Payload",
        "members": [
          {
            "astId": 291,
            "contract": "contracts/Bet.sol:Bet",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 293,
            "contract": "contracts/Bet.sol:Bet",
            "label": "eventId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 295,
            "contract": "contracts/Bet.sol:Bet",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 297,
            "contract": "contracts/Bet.sol:Bet",
            "label": "chosenWinner",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}